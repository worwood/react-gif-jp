{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","c","ReactDOM","render","document","getElementById"],"mappings":"2MA8BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAWA,OACI,sBAAMC,SANW,SAACC,GAClBA,EAAEC,iBAFkBN,GAAc,SAAAO,GAAI,OAAIL,GAAJ,mBAAkBK,OAIxDC,QAAQC,IAAI,iBAGZ,SACI,uBACIC,KAAK,OACLC,MAAUT,EACVU,SAda,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,uBCNjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACVC,EADU,0FAC8EC,UAAWH,GADzF,sBAEGI,MAAMF,GAFT,cAEVG,EAFU,gBAGOA,EAAKC,OAHZ,uBAGRC,EAHQ,EAGRA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR1B,kBAWTM,GAXS,4CAAH,sDCCRO,EAAc,SAAEC,GACzB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAMF,EAAMN,IAAIR,IAAMiB,IAAKH,EAAMN,IAAIR,MAC1C,4BAAKc,EAAMN,IAAIE,YCqBZQ,EAtBC,SAAC,GAAc,IAAbpB,EAAY,EAAZA,SAGd,ECLwB,SAAEA,GAC1B,MAA0Bd,mBACtB,CACI2B,OAAQ,GACRQ,SAAQ,IAHhB,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OATAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAM,SAAAC,GAEpBjC,QAAQC,IAAIgC,GACZH,EAAS,CAACV,OAAQa,EACVL,SAAS,SAGtB,CAACrB,IACGsB,EDZqBK,CAAa3B,GAAjCa,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,QAIhB,OACI,qCACI,mCAAOrB,EAAP,OACCqB,GAAW,yCACZ,qBAAKJ,UAAU,YAAf,SAEYJ,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,CAA8BA,IAAQA,GAAjBA,EAAIC,aEItCiB,EAnBM,WAGjB,MAAsC1C,mBAAS,CAAE,WAAjD,mBAAQ2C,EAAR,KAAoB5C,EAApB,KAGA,OAAO,qCACC,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACK4C,EAAWpB,KACR,SAACqB,GAAD,OAAO,cAAC,EAAD,CAAU9B,SAAU8B,GAAQA,Y,MCVvDC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.120a7ded.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n//se puede colocar props.setCategories\r\nconst AddCategory = ({setCategories}) => {\r\n    const [ inputValue, setInputValue ] = useState('')\r\n    \r\n    const handleInputChange= (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleAdd = () => setCategories(cats=> [inputValue,...cats,])\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleAdd();\r\n        console.log('Submit hecho');\r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: propTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","\r\nexport  const getGifs = async(category) => {\r\n        const url= `https://api.giphy.com/v1/gifs/search?api_key=rT7SM8BphSx74bGDmUy3vyei7GX6cgc0&q=${encodeURI( category )}&limit=10`\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        })\r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ( props ) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ props.img.url } alt={props.img.url}/>\r\n            <p>{ props.img.title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({category})=>{\r\n\r\n    \r\n    const  {images, loading}  = useFetchGifs(category);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            {loading && <p> Loading</p>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => (\r\n                            <GifGridItem key = { img.id } img = { img } />\r\n                        ))\r\n                    }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default GifGrid;","import { getGifs } from \"../helpers/getGifs\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState(\r\n        {\r\n            images: [],\r\n            loading:true,\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then( imgs => {\r\n            \r\n            console.log(imgs);  \r\n            setstate({images: imgs,\r\n                    loading: false,\r\n                }); \r\n    });\r\n    }, [category])\r\n    return state;\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = [ 'Marvel', 'DC', 'Disney']\r\n    const [ categories, setCategories ] = useState([ 'Marvel'])\r\n    // const handleAdd = () => \r\n    //     setCategories([...categories,'Pixar']);\r\n    return <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories}/>\r\n            <ol>\r\n                {categories.map( \r\n                    (c) => <GifGrid  category={c} key={c} />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport 'animate.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}